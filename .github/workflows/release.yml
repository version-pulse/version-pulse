name: Create Tag and Release

on:
  pull_request:
    types:
      - closed   # PR이 닫힐 때만 실행
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write  # 태그 생성과 릴리즈 권한

jobs:
  calculate_tag:
    name: Create Tag and Release
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.calculate_tag.outputs.new_tag }}

    steps:
      - name: 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리와 태그 가져오기

      - name: Git 설정
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: 태그 정보 가져오기
        run: |
          git fetch --tags

      - name: 최신 태그 확인
        id: get_latest_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "최신 태그: $TAG"
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      - name: PR 제목으로 다음 버전 계산
        id: calculate_tag
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR 제목: $PR_TITLE"

          VERSION=${{ steps.get_latest_tag.outputs.latest_tag }}
          VERSION=${VERSION#v}  # 태그 앞 'v' 제거
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          echo "현재 버전: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"

          if echo "$PR_TITLE" | grep -iq '^Major:'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            echo "🔴 메이저 버전 증가"
          elif echo "$PR_TITLE" | grep -iq '^Minor:'; then
            MINOR=$((MINOR + 1))
            PATCH=0
            echo "🟡 마이너 버전 증가"
          elif echo "$PR_TITLE" | grep -iq '^Patch:'; then
            PATCH=$((PATCH + 1))
            echo "🟢 패치 버전 증가"
          else
            echo "⚠️ PR 제목에 버전 증가 키워드(Major:, Minor:, Patch:)가 없습니다."
            exit 1
          fi

          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "다음 생성할 태그: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          

      - name: 머지 커밋에 태그 생성 및 푸시
        run: |
          git tag ${{ steps.calculate_tag.outputs.new_tag }}
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ steps.calculate_tag.outputs.new_tag }}
      - name: Debug calculate_tag output
        run: | 
          echo "!! Output from calculate_tag: '${{ steps.calculate_tag.outputs.new_tag }}'"

  generate_release_note:
    name: Generate Release Note
    needs: calculate_tag
    uses: version-pulse/version-pulse/.github/workflows/release-template.yml@main
    with:
      pr_number: ${{ github.event.pull_request.number }}
      tag_name: ${{ needs.calculate_tag.outputs.new_tag }}

  create_github_release:
    name: Create GitHub Release
    needs:
      - calculate_tag
      - generate_release_note
    runs-on: ubuntu-latest
    steps:
      - name: GitHub 릴리즈 생성
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.calculate_tag.outputs.new_tag }}
          name: version ${{ needs.calculate_tag.outputs.new_tag }}
          body: ${{ fromJSON(needs.generate_release_note.outputs.release_note) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_to_maven_central:
    name: Deploy to Maven Central
    needs:
      - calculate_tag
      - create_github_release
    uses: version-pulse/version-pulse/.github/workflows/deploy.yml@main
    with:
      tag_name: ${{ needs.calculate_tag.outputs.new_tag }}
