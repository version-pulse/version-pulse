# .github/workflows/release-template.yml
name: Generate Release Note

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: number
      tag_name:
        required: true
        type: string
    outputs:
      release_note:
        description: 'Generated release note'
        value: ${{ jobs.generate.outputs.release_note }}

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      release_note: ${{ steps.generate.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Release Notes
        id: generate
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ inputs.pr_number }};
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            let commitMessages = commits.map(commit => commit.commit.message);

            const categories = {
              feat: [],
              fix: [],
              refactor: [],
              docs: [],
              chore: [],
              deploy: [],
              test: [],
              other: []
            };

            commitMessages.forEach(message => {
              if (/.*Feat[:\s]/.test(message)) {
                categories.feat.push(message);
              } else if (/.*Fix[:\s]/.test(message)) {
                categories.fix.push(message);
              } else if (/.*Refac[:\s]/.test(message)) {
                categories.refactor.push(message);
              } else if (/.*Docs[:\s]/.test(message)) {
                categories.docs.push(message);
              } else if (/.*Chore[:\s]/.test(message)) {
                categories.chore.push(message);
              } else if (/.*Deploy[:\s]/.test(message)) {
                categories.deploy.push(message);
              } else if (/.*Test[:\s]/.test(message)) {
                categories.test.push(message);
              } else {
                categories.other.push(message);
              }
            });

            let releaseNote = `## 🚀 version-pulse ${{ inputs.tag_name }} (${new Date().toISOString().split('T')[0]})\n`;
            releaseNote += `이번 릴리즈에서는 주요 기능 추가 및 개선 사항이 포함되어 있습니다.\n\n`;

            if (categories.fix.length > 0) {
              releaseNote += `🐛 버그 수정 (Bug Fixes)\n`;
              categories.fix.forEach(item => releaseNote += `- ${item.replace(/^Fix:\s*/, '')}\n`);
              releaseNote += '\n';
            }

            if (categories.refactor.length > 0) {
              releaseNote += `🛠 리팩토링 및 개선 (Refactoring & Improvements)\n`;
              categories.refactor.forEach(item => releaseNote += `- ${item.replace(/^Refac:\s*/, '')}\n`);
              releaseNote += '\n';
            }

            if (categories.feat.length > 0) {
              releaseNote += `✨ 새로운 기능 (New Features)\n`;
              categories.feat.forEach(item => releaseNote += `- ${item.replace(/^Feat:\s*/, '')}\n`);
              releaseNote += '\n';
            }

            if (categories.docs.length > 0 || categories.chore.length > 0 || categories.deploy.length > 0) {
              releaseNote += `⚙️ 빌드 및 배포 관련 (Build & Deployment)\n`;
              [...categories.docs, ...categories.chore, ...categories.deploy].forEach(item => releaseNote += `- ${item.replace(/^(Docs|Chore|Deploy):\s*/, '')}\n`);
              releaseNote += '\n';
            }

            if (categories.other.length > 0) {
              releaseNote += `🔹 기타 변경 사항\n`;
              categories.other.forEach(item => releaseNote += `- ${item}\n`);
              releaseNote += '\n';
            }

            console.log("✅ Generated Release Note:\n" + releaseNote);
            return releaseNote.replace(/\r?\n/g, '%0A');
